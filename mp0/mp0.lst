     1                                  ; MP0 - Terrence Janas - August 26, 2001
     2                                  ;
     3                                  ;       This program illustrates a (very) basic assembly program and
     4                                  ;       the use of LIB291 input and output routines.
     5                                  ;       By working on this code, you will have the opportunity to 
     6                                  ;       exercise the tools for this class, namely the editor, 
     7                                  ;       the Assembler (NASM), and the debugger (TD).
     8                                  ;       Be sure to put your name in the places where it says 'Your Name' 
     9                                  ;       and also  change the date where it says 'Today's Date'.  
    10                                  ;       The changes that you need to make to this program are 
    11                                  ;       described in the MP0 assignment page.
    12                                  
    13                                  	BITS	16
    14                                  
    15                                  ;====== SECTION 1: Define constants =======================================
    16                                  
    17                                          CR      EQU     0Dh
    18                                          LF      EQU     0Ah
    19                                          BEL     EQU     07h
    20                                  
    21                                  ;====== SECTION 2: Declare external procedures ============================
    22                                  
    23                                  EXTERN  kbdine, dspout, dspmsg, dosxit
    24                                  
    25                                  ;====== SECTION 3: Define stack segment ===================================
    26                                  
    27                                  SEGMENT stkseg STACK                    ; *** STACK SEGMENT ***
    28 00000000 <res 00000200>                  resb      64*8
    29                                  stacktop:
    30                                  
    31                                  ;====== SECTION 4: Define code segment ====================================
    32                                  
    33                                  SEGMENT code                            ; *** CODE SEGMENT ***
    34                                  
    35                                  ;====== SECTION 5: Declare variables for main procedure ===================
    36 00000000 00                      mygrade  db      0 
    37 00000001 576861742067726164-     question db      'What grade would you like in ECE291? ','$'
    38 0000000A 6520776F756C642079-
    39 00000013 6F75206C696B652069-
    40 0000001C 6E204543453239313F-
    41 00000025 2024               
    42 00000027 0D0A476F6F64204C75-     Exitmsg  db      CR,LF,'Good Luck!',CR,LF,'$'
    43 00000030 636B210D0A24       
    44 00000036 0D0A4E6F7420612076-     invalid  db      CR,LF,'Not a valid choice! ',CR,LF,'$' 
    45 0000003F 616C69642063686F69-
    46 00000048 636521200D0A24     
    47 0000004F 0D0A4C6561726E2061-     Amsg     db      CR,LF,'Learn all material and Submit MPs early.',CR,LF,'$'
    48 00000058 6C6C206D6174657269-
    49 00000061 616C20616E64205375-
    50 0000006A 626D6974204D507320-
    51 00000073 6561726C792E0D0A24 
    52 0000007C 0D0A4B656570207570-     Bmsg     db      CR,LF,'Keep up in class and submit MPs on time.',CR,LF,'$'
    53 00000085 20696E20636C617373-
    54 0000008E 20616E64207375626D-
    55 00000097 6974204D5073206F6E-
    56 000000A0 2074696D652E0D0A24 
    57 000000A9 0D0A506C6179205175-     Cmsg     db      CR,LF,'Play Quake3 instead of studying for exams.',CR,LF,'$'
    58 000000B2 616B653320696E7374-
    59 000000BB 656164206F66207374-
    60 000000C4 756479696E6720666F-
    61 000000CD 72206578616D732E0D-
    62 000000D6 0A24               
    63 000000D8 0D0A536B6970206120-     Dmsg     db      CR,LF,'Skip a few machine problems.',CR,LF,'$'
    64 000000E1 666577206D61636869-
    65 000000EA 6E652070726F626C65-
    66 000000F3 6D732E0D0A24       
    67 000000F9 0D0A536C6565702074-     Fmsg     db      CR,LF,'Sleep through exams.',CR,LF,'$'
    68 00000102 68726F756768206578-
    69 0000010B 616D732E0D0A24     
    70 00000112 FEC0                    mystery  db      0FEh, 0C0h
    71                                  
    72                                  ;====== SECTION 6: Program initialization =================================
    73                                  
    74                                  ..start:
    75 00000114 8CC8                            mov     ax, cs                  ; Initialize Default Segment register
    76 00000116 8ED8                            mov     ds, ax  
    77 00000118 B8[0000]                        mov     ax, stkseg              ; Initialize Stack Segment register
    78 0000011B 8ED0                            mov     ss, ax
    79 0000011D BC[0002]                        mov     sp, stacktop            ; Initialize Stack Pointer register
    80                                  
    81                                  ;====== SECTION 7: Main procedure =========================================
    82                                  
    83                                  MAIN:
    84 00000120 BA[0100]                        mov     dx, question            ; Prompt user with the grade question
    85 00000123 E8(0000)                        call    dspmsg                   
    86 00000126 E8(0000)                        call    kbdine   
    87 00000129 A2[0000]                        mov     [mygrade], al           ; Save result
    88                                              
    89                                  .CheckGrade:
    90 0000012C 803E[0000]41                    cmp     byte [mygrade], 'A'     ; Check if A student
    91 00000131 7509                            jne     .NotGradeA
    92 00000133 BA[4F00]                        mov     dx, Amsg                ; Print message for A students
    93 00000136 E8(0000)                        call    dspmsg
    94 00000139 E94E00                          jmp     .mpExit
    95                                  
    96                                  .NotGradeA:
    97 0000013C 803E[0000]42                    cmp     byte [mygrade], 'B'     ; Check if B student
    98 00000141 7509                            jne     .NotGradeB
    99 00000143 BA[7C00]                        mov     dx, Bmsg                ; Print message for B students
   100 00000146 E8(0000)                        call    dspmsg
   101 00000149 E93E00                          jmp     .mpExit
   102                                  
   103                                  .NotGradeB:
   104 0000014C 803E[0000]43                    cmp     byte [mygrade], 'C'     ; Check if C student
   105 00000151 7509                            jne     .NotGradeC
   106 00000153 BA[A900]                        mov     dx, Cmsg                ; Print message for C students
   107 00000156 E8(0000)                        call    dspmsg
   108 00000159 E92E00                          jmp     .mpExit
   109                                  
   110                                  .NotGradeC:
   111 0000015C 803E[0000]44                    cmp     byte [mygrade], 'D'     ; Check if D student
   112 00000161 7509                            jne     .NotGradeD
   113 00000163 BA[D800]                        mov     dx, Dmsg                ; Print message for D students
   114 00000166 E8(0000)                        call    dspmsg
   115 00000169 E91E00                          jmp     .mpExit
   116                                  
   117                                  .NotGradeD:
   118 0000016C 803E[0000]46                    cmp     byte [mygrade], 'F'     ; Check if F student
   119 00000171 7509                            jne     .NotGradeF
   120 00000173 BA[F900]                        mov     dx, Fmsg                ; Print message for F students
   121 00000176 E8(0000)                        call    dspmsg
   122 00000179 E90E00                          jmp     .mpExit
   123                                  
   124                                  .NotGradeF:
   125 0000017C B207                            mov     dl, BEL                 ; Ring the bell if other character
   126 0000017E E8(0000)                        call    dspout
   127 00000181 BA[3600]                        mov     dx, invalid             ; Print invalid message
   128 00000184 E8(0000)                        call    dspmsg
   129 00000187 E90600                          jmp     .FinalExit
   130                                  
   131                                  .mpExit:
   132 0000018A BA[2700]                        mov     dx, Exitmsg             ; Type out exit message
   133 0000018D E8(0000)                        call    dspmsg
   134                                  
   135                                  .FinalExit:
   136 00000190 E8(0000)                        call    dosxit                  ; Exit to DOS
   137                                  
   138                                  
